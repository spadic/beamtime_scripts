#!/usr/bin/env python
# vim: syntax=python


PATH_TO_SPADIC_SW = '/home/cbm/cbmflib05/spadic10-sw/spadic'
FLIB_CTRL_BASE_PORT = 9750

import sys
sys.path.insert(0, PATH_TO_SPADIC_SW)
from walter_client import Spadic


#==== the SPADIC configuration =======================================

def set_config(ctrl, channels):
    # first reset everything to initial values and change only what differs
    ctrl.reset()

    # global analog settings
    ctrl.adcbias.set(
      baseline = 70,
      vndel = 70,
      vploadfb = 70,
      vpamp = 70,
      vpdel = 70,
      vpfb = 70,
      vploadfb2 = 70
    )

    ctrl.frontend.set( # change this only when everything else works
      frontend = 'P',
      psourcebias = 0, # ramp up to 80 later (use spadic_csa_ramp script)
      nsourcebias = 70,
      pcasc = 30,
      ncasc = 110,
      xfb = 30
    )

    # per-channel analog settings
    for i in channels:
        ctrl.frontend.channel[i].set(
          enablecsa = True,
          enableadc = True,
          baseline = 0 # TODO adjust properly
        )

    # global digital settings
    ctrl.hitlogic.set(
      threshold1 = 30, # TODO adjust properly
      threshold2 = 50, # TODO adjust properly
      diffmode = False,
      mask = 0xFFFFFFFF,
      window = 32,
      analogtrigger = False, # injection in ch.31 triggered by DLM 10
      triggerout = False # LVDS output triggered by DLM 12
    )

    # per-channel digital settings
    for i in channels:
        ctrl.digital.channel[i].set(
          enable = True,
          entrigger = True # DLM 11 force trigger
        )

    #----------------------------------------------------
    # advanced stuff - do this when everything else works

    # neighbor trigger setup
    #ctrl.digital.neighbor['A'].set(source=5, target=3, enable=1) # etc

    # digital filter settings
    #ctrl.filter.set(
    #  scaling = 32, # 32 = unity
    #  offset = 0
    #)

#==== user interface =================================================

def get_routing(argv):
    syscore_num = int(argv[1])
    spadic_num = int(argv[2])
    return syscore_num, spadic_num

def get_channels(ch_arg):
    if ch_arg.startswith('0x'):
        return channels_from_hex(ch_arg)
    else:
        return map(int, ch_arg.split(','))

def channels_from_hex(ch_hex_arg):
    mask = int(ch_hex_arg, 16)
    bitstring = bin(mask)[2:] # strip '0b'
    return [i for (i, b) in enumerate(bitstring) if b == '1']

USAGE = """
usage: spadic_default_config <syscore #> <spadic #> [<channels>]

Channels can be specified either as a list of numbers, separated by a
comma (without space), for example:

  0,1,2,3,15,18,29,30,31

OR as an 8-digit hex code (prefixed with 0x), for example:

  0xF0000003

would be equivalent to 0,1,2,3,30,31.

If left out, all channels are configured.
"""

def main(argv):
    try:
        syscore_num, spadic_num = get_routing(argv)
        if len(argv) > 3:
            channels = get_channels(argv[3])
        else:
            channels = range(32)
    except:
        raise SystemExit(USAGE)

    port = FLIB_CTRL_BASE_PORT + syscore_num
    host = 'tcp://localhost:%d' % port

    print 'configuring SPADIC #%d at %s...' % (spadic_num, host)
    print 'selected channels:', ' '.join(map(str, sorted(channels)))
    s = Spadic(host, spadic_num)
    set_config(s.ctrl, channels)
    s.ctrl.apply()
    print 'OK. Amplifiers are still powered down.'

if __name__=='__main__':
    main(sys.argv)

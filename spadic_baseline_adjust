#!/usr/bin/env python
# vim: syntax=python


PATH_TO_SPADIC_SW = '/home/cbm/cbmflib05/spadic10-sw/spadic'
PATH_TO_HITMONITOR = '/home/cbm/cbmflib05/spadic10-sw/lib/timeslice/demo'

import sys
sys.path.insert(0, PATH_TO_SPADIC_SW)
sys.path.insert(0, PATH_TO_HITMONITOR)
from walter_client import Spadic
from hitmonitor import HitMonitor

import numpy as np
from scipy.optimize import curve_fit

FLIB_CTRL_BASE_PORT = 9750
SPADIC_BASE_ADDR = 0 # scv3 register 0x6a0
EQ_ID_BASE = 0xE000
ACQUIRE_INTERVAL = 0.1 # seconds to acquire baseline + noise

USAGE = """
usage: spadic_baseline_adjust <syscore #> <spadic #> [--target <level>] [--measure <seconds>]

If the target level is not specified, it is automatically detected (use
this if you are not sure what the appropriate value is).

Increasing the duration for which the baselines are measured improves the
accuracy with which the target level can be achieved. The default duration is
{duration} seconds.
""".format(duration=ACQUIRE_INTERVAL)

def get_arg(argv, name, type_):
    try:
        return type_(argv[argv.index(name)+1])
    except ValueError, TypeError:
        return None

class BaselineAdjuster:
    # TODO add second order term and find good initial guess
    @staticmethod
    def baseline_curve_inv(x, a, b):
        return a*x + b

    CENTER_SETTING = 70 # not really the center but the nominal value
    SETTING_RANGE_WARN = [CENTER_SETTING-30, CENTER_SETTING+30]
    SETTING_RANGE_FAIL = [0, 127]

    @staticmethod
    def is_outside_range(value, range_):
        return not (range_[0] <= value <= range_[1])

    @staticmethod
    def limit_to_range(value, range_):
        if value < range_[0]:
            return range_[0]
        if value > range_[1]:
            return range_[1]

    def __init__(self, argv):
        try:
            syscore_num, spadic_num = map(int, argv[1:3])
        except:
            raise SystemExit(USAGE)
        self._duration = get_arg(argv, '--measure', float)
        self._target_level = get_arg(argv, '--target', float)

        # set up HitMonitors
        mon = {}
        for i in [0, 1]:
            eq_id = EQ_ID_BASE + syscore_num
            src_addr = SPADIC_BASE_ADDR + 2*spadic_num+i
            mon_arg = map(str, [eq_id, src_addr])
            mon[i] = HitMonitor(['dummy'] + mon_arg)
        self.mon = mon

        # set up controls
        port = FLIB_CTRL_BASE_PORT + syscore_num
        host = 'tcp://localhost:%d' % port
        print "connecting to SPADIC #%d at %s" % (spadic_num, host)
        s = Spadic(host, spadic_num)
        s.ctrl.update()
        self.ctrl = s.ctrl

        # Make a dummy reading to let the publisher know we are here.
        # Apparently we need to use the same time interval here as we use
        # later. If we use less, we will miss something later, if we use
        # more, we will get too much later.
        self.acquire(self._duration)

        # calibrate
        b, p = self.calibrate_settings()
        self.measured_baselines = b
        self.calibration_parameters = p

    def acquire(self, duration=None):
        res = {'rate': {}, 'mean': {}, 'std':  {}}
        for i in [0, 1]:
            a = self.mon[i].acquire(duration or ACQUIRE_INTERVAL)
            for ch_str in sorted(a['baseline_mean']): # 'EEEE:LLLL:C'
                ch = int(ch_str[-1], 16) + 16 * i
                res['rate'][ch] = a['hit_rates'][ch_str]
                res['mean'][ch] = a['baseline_mean'][ch_str]
                res['std'][ch] = a['baseline_std'][ch_str]
        return res

    def get_setting(self, ch):
        return self.ctrl.frontend.channel[ch].get()['baseline']

    def set_setting(self, ch, value):
        self.ctrl.frontend.channel[ch].set(baseline=value)

    def measure_baseline(self, setting, channels=None):
        print "measuring the baselines at setting %d..." % setting
        channels = channels or range(32)
        for ch in channels:
            self.set_setting(ch, setting)
        self.ctrl.apply()
        acquired = self.acquire(self._duration)
        result = {k: acquired[k] for k in ['mean', 'std']}
        if not all(result.values()):
            raise RuntimeError('Could not measure the baseline.')
        return result

    def calibrate_settings(self, channels=None):
        channels = channels or range(32)
        setting_steps = [self.CENTER_SETTING + (10*i) for i in range(-2, 4)]
        measured_baselines = {s: self.measure_baseline(s, channels)
                              for s in setting_steps}
        parameters = {}
        p0 = [1.2, 350]
        for ch in channels:
            # trick: swap x, y now to save solving for x later
            y = np.array(setting_steps)
            x = np.array([measured_baselines[s]['mean'][ch]
                          for s in setting_steps])
            sigma = np.array([measured_baselines[s]['std'][ch]
                              for s in setting_steps])
            popt, _ = curve_fit(self.baseline_curve_inv, x, y, p0, sigma)
            parameters[ch] = popt
        return measured_baselines, parameters

    def adjust(self):
        """
        Equalize the baselines of all channels.
        If not specified otherwise, the target is the median of the center
        settings.
        """
        # TODO sort out broken channels (mean value off, noisy, ...)
        channels = range(32)

        b = self.measured_baselines[self.CENTER_SETTING]['mean']
        target = self._target_level or sorted(b.values())[len(channels)/2] # median
        print "the target baseline is %.1f" % target
        for ch in channels:
            s = int(self.baseline_curve_inv(target, *self.calibration_parameters[ch]))
            if self.is_outside_range(s, self.SETTING_RANGE_FAIL):
                limit_value = self.limit_to_range(s, self.SETTING_RANGE_FAIL)
                print ("WARNING: Trying to set channel %d to %d, "
                       "which is outside the acceptable range. "
                       "Limiting to %d." % (ch, s, limit_value))
                s = limit_value
            elif self.is_outside_range(s, self.SETTING_RANGE_WARN):
                print ("WARNING: Trying to set channel %d to %d, "
                       "which is not a good value." % (ch, s))
            # TODO check values not in 0..127
            self.set_setting(ch, s)

        self.ctrl.apply()
        print "final baseline settings:", [self.get_setting(ch)
                                           for ch in sorted(channels)]


#---- MAIN -----------------------------------------------------------

def main(argv):
    try:
        adj = BaselineAdjuster(argv)
    except RuntimeError as e:
        raise SystemExit('ERROR: %s' % str(e))
    adj.adjust()

if __name__=='__main__':
    main(sys.argv)
